

<!--Speakers notes

0:00

A: Hello, I'm Angelina Fabbro. I'm a softwre engineer/web developer. I have a bachelor's degree in cognitive science, and now I work at Mozilla.

B: and I'm Bill Mills, a nuclear physicist and web developer from TRIUMF and recently of CERN.

A: (Right now should be at the 'Let's Change the World' slide) A lot of us software developers love science, we admire the work done by scientists but unless we have been or are going to grad school, it's easy to feel disconnected and removed from the scientific process. We think that because we're not specialists like scientsits are that we can't be a part of the scientific process, but we're here to tell you today that this is not the case and if anything science needs experienced industry software developers more than it needs anything else.

2:00

NOTE: Angelina thinks Bill should explain what a 'channel' of information is, assume the audience does not have a context for this

B: So, let me start off with something I call this Moore's law for particle physics.  In the early 80's, CERN had an experiment called UA1 that discovered the W and Z bosons, and UA1 had something to the tune of 10k independent channels of information.  Go forward one generation to the ALEPH experiment, and we had about 100k channels, an order of magnitude more than its predacessor.  And finally, one more generation down the line, look at the ATLAS experiment on the Large Hadron Collider, my former experiment and one of the devices that discovered the Higgs boson - ATLAS has over 3M channels in its innermost detector alone!  The informational scale and complexity of physics experiments is growing exponentially, and the same is true in nuclear physics at labs like TRIUMF as well - but as we make these great strides forward in physics, how are our user interfaces keeping up?

Because of the skyrocketing scale of their work, CERN has been forced to come up with some tremendous visualizations of their experiments - and yet, this visualization framework hasn't been adopted even by CERN's closest collaborators to visualize their own experiments - why is that?  Meanwhile, in nuclear physics, where we've experienced a similar explosion in complexity scale, we built a web app for controling our experiments in 1993, long before 'web app' was even a word, in order to take advantage of the usability that the web had to offer even back then, and when I came to TRIUMF, that UI looked a bit like this.  It's exactly what it looks like - it's a table dump, of the thousands of parameters that go into one of our modern nuclear experiments.  But why don't we use the visualization tools that CERN has come up with for our own experiemnts, I hear you asking - it's because that software isn't modular, isn't maintainable, and isn't portable - physicists are still by in large writing single use code.  And why does our web app kind of still look like 1993?  Forward momentum in physics UI design has been almost nill, due to the terrible lack of design skills in my field; only now with my work at TRIUMF on the GRIFFIN project are we beginning to take advantage of what the modern web has to offer. Physicists have achieved some amazing things over the past 20 years - but in that rush for discovery, we have accrued a terrible technical debt, in our UI, in our information architecture, and in how we interact with our code every day, because the most obvious methodologies that worked for small, local experiments just don't scale to experiments that produce hundred of MB/s of data, and have collaborators spread around the world.  While the people in this room were blowing away the barriers of what could be done with the internet, and making revolutionary methodological advances in how to write good code, my field has progressed extremely slowly in its relationship with computing and UI - only now are people at TRIUMF and elsewhere beginning to rethink things, because now we are beginning to pay the price for this intense mismatch in scale.  And we're not alone - other fields of research are finding themselves further afield from good computing than they'd like to be, and yet, formal education in computing for scientists remains at the level of a single first year college course at most, and collaboration between software developers and labs is almost unheard of.  

5:00

/*Angelina discusses her observations of coding in science, comments on why these behaviors are a probem and what their result is / is likely to be - research backing?*/

- Angelina introduces how she met Bill, early observations about coding style (very brief)

- Angelina explains the impetus for grad students to write unmaintainable code and that even though grad students think that there code won't be used by anyone else, it is often handed off without their knowledge after the fact

- Angelina discusses a few code samples, and perhaps how they could be improved?

15:00

B: Angelina just gave us an excellent overview of just some of the gaps in coding methodology she's seen in the sciences; now for the next couple of minutes, I want walk you through just a few of the many design problems that I've had to fight with in my efforts to modernize the other side of computing in physics, that of user interface, and while I do so, I want you to be brutal!  I want you to think about how you would have solved these problems, what you think is still lacking in what I've come up with, and how you would contribute to a project like this given the chance (more on this later).
So let's jump in to some nuclear physics.  The GRIFFIN Experiment is a brand new, next generation gamma ray spectroscopy experiment coming online at TRIUMF next year, and one project that is trying to change the way physicists think about coding and UI - our physics goals are to better understand the R-process, which is how the heaviest elements are formed in supernovae, to make precision measurements that explore the fundamental physical symmetries, and to gain a better undersanding of nuclear structure via a spherical array of radiation detectors.  On the computing side, I'm pleased to report that a few weeks ago I convinced the collaboration to publicize nearly all its code open-source as we collaborate on GitHub during development, and have begun a policy of weekly code review for students working on the project.  I could talk all day about what we're trying to do with GRIFFIN, but the key problem that I was hired to solve was one of user interface design.  Our goal is a web app to keep an eye on what all the many aspects of the experiment are doing in real time, in a way that requires an absolute minimum of expertise and domain knowledge about the experiment, as opposed to our previous table view I showed you, which requires tremendous expertise to parse.  

-One key reponsibilitiy of this web app is to provide real time diagnostic information about the experiment, to maximize up-time.
-A key value to monitor is the rate at which any detector is making measurements
-if these rates are reported in a table, their context is lost
-skeuomorphism encodes more information than a table dump.

-Engineering: canvas v. dom elts v. frameworks

-Angelina's suggestion: some developer's quote: if you a re a sw dev that anyone else will use, you are by defn a ux dev

[
One key variable that we have to be aware of at all times, is how fast are our detectors counting?  If they're counting too fast, maybe we've set them to be too sensitive and we're just counting background noise; too slow, and maybe they aren't working properly.  Putting these numbers in a list will give you these counting rates, but it completely destroys the geometry of the information, and in physics, geometry is crucial.  Have a look at our neutron detector DESCANT, for example - imagine if this sector of detectors were counting weirdly fast for some reason - if those rates were arranged in a table, their relationship to each other would only be recognizable by the most dedicated experts - but arranged skeuomorphically as I've done, anyone can recognize not only that something is up, but get some instant insight into what's going on.  Skeuomorphism comes and goes in web design, but in physics, we love it becaue it preserves crucial contextual information which would be completely lost when you try and cram it into a grid.  Ideas on how to communicate not only the explicit facts, but their implicit contexts are very valuable when trying to monitor and understand such a complicated experiment.

So that's a problem in explicit and implict information representation, but let's stop and think about the engineering side of web skeumorphism here - I decided to build all these assets in HTML canvases, becuase I didn't want the element bloat of a ton of SVG objects, but the result is that since canvases don't have an internal concept of an object, all these animations and tooltips had to be managed by hand, thus trading DOM bloat for code bloat.  Libraries like Cake are doing some fabulous things with canvases, but I'm really reluctant to start stapling on framework after framework to solve every problem I encounter.  Angelina has spoken previously about the ability to scrape a web framework for just the functionality a project needs, and this sort of thing would go a really long way to helping intensely DIY physicists get comfortable with using more professional libraries.

In addition to representation and engineering, web design also plays a huge role here - as I've explained, a detector like DESCANT can benefit tremendosly from a skueomorphic representation - but check out what I came up with for SHARC.  While DESCANT had 70 elements, SHARC has over 900 - trying to come up with a skueomorphic representation of this is a big challenge that we need help from web designers to really get right.  We need people from all fields in web development, and design is one of the things my field is most challenged by. 
]

Another key angle of my work has been in overhauling interaction design for GRIFFIN.  One thing about all nuclear and particle experiments today, and this might be an interesting challenge for the hardware people in the room, is that we can generate data many, many times faster than we can actually write it to disk, so we spend a great deal of effort designing fast electronic triggers and filters to decide in real time what data we want to keep, and what data we can afford to throw away.  You can imagine that this is a pretty crucial piece of experimental design, and the definitions of these filters get very complicated.  The filter configuration on GRIFFIN's predacessor, the 8Pi, was - well, it was pretty much what you see here - an index of possible filters decribed by strings of gobldygook.  After a while, we all learn to decode these strings of filter definitions, but really there's no reason for this - there's no reason a competant interaction designer couldn't come up with something much simpler than this.  So here's what I came up with - a simple drag-and-drop, picture-based interface to construct whatever filter I can imagine.  This is a lot better than what we had, but a skilled interaction designer could do even better.

There are tons more things I could show you about GRIFFIN, but already we've seen some of the key problems here - physics labs need not only good software engineers, but web designers, user experience professionals and interaction experts to really bring their UI together - there is room for every single one of you to make a truly valuable contribution to experimental physics, if you want to.



25:00

/*Angelina - thoughts on how to instill good computing culture? */

- The problem of developers thinking they can't code for science (talk about attitudes from 2013 NASA Space Apps Challenge)

- Scientists: If you're not a computing scientist, admit that you are out of your domain (accept help!)
- Developers: You are smart. You are capable.

- Developers often start with top-down enforcement, but the sciences will need grassroots enculturation

-'Treating code as a 1st class research citizen' needs a strong cultural base

35:00

Physics isn't the only field that needs your help.  Before I came here, I spoke to a number of scientists in other fields about what they would do with more expertise in computing, and the demand was overwhelming.  Agricultural scientists have reams and reams of data about land services and qualities, but no good tools for contextualizing and collating this information - they asked me for a Google Maps overlay they could easily enter geographic data into.  An evolution lab doing an experiment on aquatic bacterial growth hires an undergrad to come in to the lab, a couple times a day, just to check the temperature and depth of a tank of water - a web facing sensor array to allow the student to keep an eye on their experiment from their smartphone would be a weekend project for some people in this room.  There is a need in every field of science for experts from every field of computing to address problems at every scale of complexity - whatever floats your boat, it's out there for you to solve, and many of us would love to work with you on the projects that interest you.

Just before I turn things over to Angelina, there was one request I got from an ecologist that I want to share with you.  When I asked them what they would do if they had a developer on their team, they said the most important thing a computing expert could do for them would be to meet with them, and start a conversation about what's possible.  The person I'm thinking of here is a tremendous ecologist, but they like so many scientists are so deeply entrenched in their field that they don't know what's going on in yours - they don't know what to wish for.  I believe that the state of computing in the sciences and this huge disconnect that we're wrestling with is one sign of the decline of our reductionist traditions.  Reductionism and conceptual divisiveness served us well for centuries, but I belive that those traditions are starting to drag us down, and that we are only going to take our next big step forward when we learn to work together again.  Nobody comes to Strange Loop if they don't dream of the awesome things we are going to do in the future - but if you want that to be *our* future, all you need to do is seek out professionals in the science that excites you the most, and start a conversation about what we can do together.  Now I'll turn things over to Angelina, who has some great ideas on just how we can get scientists up to speed in good computing.

38:00

A: When Alex Miller asked me to speak at Strange Loop, I knew that I absolutely had to bring Dr. Mills along so we could finally give this talk. From looking at the schedule and the talk last year, this interdisciplinary nature of this conference was apparent, and an interdisciplinary approach is what we need in order to make all aspects of scientific inquiry better.

B: Time is currently very ripe for computing and science to work together, since science is beginning to try to change


40:00




-->